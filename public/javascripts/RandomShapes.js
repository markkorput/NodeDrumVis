// Generated by CoffeeScript 1.6.3
(function() {
  this.RandomShapes = (function() {
    function RandomShapes(_opts) {
      var folder, item,
        _this = this;
      this.options = _opts;
      this.camera = _opts.camera;
      this.scene = _opts.scene;
      this.notes = _opts.notes;
      this.colors = _.map(Please.make_color({
        colors_returned: 20
      }), function(clr) {
        return new THREE.Color(clr);
      });
      this.kinds = [];
      this.camVelocity = new THREE.Vector3(0, 0, 0);
      this.geometries = [new THREE.CubeGeometry(1, 1, 1), new THREE.PlaneGeometry(5, 20, 32)];
      this.config = new function() {
        this.enabled = true;
        this.camSpeed = 0.1;
        this.spawnPosX = 100;
        this.spawnPosY = 0;
        this.spawnPosZ = -30;
        this.targetPosX = 0;
        this.targetPosY = 0;
        return this.targetPosZ = -30;
      };
      if (this.options.gui) {
        folder = this.options.gui.addFolder('RandomShapes');
        folder.open();
        item = folder.add(this.config, 'enabled');
        item = folder.add(this.config, 'camSpeed', -2, 2);
      }
      this.notes.on('add', function(note) {
        var mesh;
        mesh = _this.add(note.get('note'), 1.0);
        return note.mesh = mesh;
      });
      this.notes.on('remove', function(note) {
        console.log('removing note...');
        return _this.scene.remove(note.mesh);
      });
      this.notes.on('reset', function(collection, options) {
        console.log('resetting...');
        _.each(options.previousModels, function(note) {
          return _this.scene.remove(note.mesh);
        });
        return _this.kinds = [];
      });
    }

    RandomShapes.prototype.kindToIndex = function(kind) {
      var idx;
      idx = _.indexOf(this.kinds, kind);
      if (idx > -1) {
        return idx;
      }
      this.kinds.push(kind);
      return this.kinds.length - 1;
    };

    RandomShapes.prototype.add = function(kind, volume) {
      var endPos, idx, material, mesh,
        _this = this;
      if (this.config.enabled !== true) {
        return;
      }
      material = new THREE.LineBasicMaterial();
      idx = this.kindToIndex(kind);
      material.color = this.colors[idx];
      mesh = new THREE.Mesh(this.geometries[0], material);
      mesh.position.addVectors(this.camera.position, new THREE.Vector3(this.config.spawnPosX, this.config.spawnPosY, this.config.spawnPosZ));
      this.scene.add(mesh);
      endPos = new THREE.Vector3(0, 0, 0);
      endPos.addVectors(this.camera.position, new THREE.Vector3(this.config.targetPosX, this.config.targetPosY, this.config.targetPosZ));
      new TWEEN.Tween(mesh.position).to({
        x: endPos.x,
        y: endPos.y,
        z: endPos.z
      }).easing(TWEEN.Easing.Exponential.Out).start().onComplete(function() {
        return console.log('done');
      });
      return mesh;
    };

    RandomShapes.prototype.update = function(dt) {
      if (this.config.enabled !== true) {
        return;
      }
      TWEEN.update();
      this.camVelocity.z = this.config.camSpeed;
      return this.camera.position.add(this.camVelocity);
    };

    return RandomShapes;

  })();

}).call(this);
