// Generated by CoffeeScript 1.6.3
this.Tiler = (function() {
  function Tiler(_opts) {
    var folder,
      _this = this;
    this.log('constructor: ', _opts);
    this.options = _opts;
    this.camera = _opts.camera;
    this.scene = _opts.scene;
    this._notes = _opts.notes;
    this.kinds = [];
    if (_opts.imageUrl) {
      this.setImageUrl(_opts.imageUrl);
    }
    this.config = {
      enabled: true,
      showOriginal: true
    };
    if (this.options.gui) {
      this.options.gui.remember(this.config);
      folder = this.options.gui.addFolder('Tiler');
      _.each(Object.keys(this.config), function(key) {
        var item;
        return item = folder.add(_this.config, key);
      });
    }
    this._notes.on('add', function(note) {
      var mesh;
      mesh = _this.add(note.get('note'), 1.0);
      return note.set({
        tilerMesh: mesh
      });
    });
    this._notes.on('remove', function(note) {
      _this.log('removing note...');
      return _this.scene.remove(note.get('randomShapeMesh'));
    });
    this._notes.on('reset', function(collection, options) {
      _this.log('resetting...');
      _.each(options.previousModels, function(note) {
        _this.scene.remove(note.get('randomShapeMesh'));
        return note.unset('mesh');
      });
      return _this.kinds = [];
    });
  }

  Tiler.prototype.kindToIndex = function(kind) {
    var idx;
    idx = _.indexOf(this.kinds, kind);
    if (idx > -1) {
      return idx;
    }
    this.kinds.push(kind);
    return this.kinds.length - 1;
  };

  Tiler.prototype.add = function(kind, volume) {
    var idx, material, mesh;
    if (this.config.enabled !== true) {
      return;
    }
    material = new THREE.LineBasicMaterial();
    idx = this.kindToIndex(kind);
    material.color = this.colors[idx];
    mesh = new THREE.Mesh(_.sample(this.geometries), material);
    this.scene.add(mesh);
    return mesh;
  };

  Tiler.prototype.update = function(dt) {
    if (this.config.enabled !== true) {

    }
  };

  Tiler.prototype.log = function(msg) {
    if (arguments.length === 1) {
      console.log('Tiler', msg);
      return;
    }
    if (arguments.length === 2) {
      console.log('Tiler', msg, arguments[1]);
      return;
    }
    if (arguments.length === 3) {
      console.log('Tiler', msg, arguments[1], arguments[2]);
      return;
    }
    return console.log('Tiler', msg, arguments[1], arguments[2], arguments[3]);
  };

  Tiler.prototype.setImageUrl = function(_url) {
    var onError, onProgress, onSuccess,
      _this = this;
    this.log('setImageUrl: ', _url);
    this._imageUrl = _url;
    this.textureLoader || (this.textureLoader = new THREE.TextureLoader());
    onSuccess = function(texture) {
      return _this.setImageTexture(texture);
    };
    onProgress = function(xhr) {
      return _this.log((xhr.loaded / xhr.total * 100) + '% loaded');
    };
    onError = function(xhr) {
      return _this.log('An error happened while loading texture');
    };
    return this.textureLoader.load(this._imageUrl, onSuccess, onProgress, onError);
  };

  Tiler.prototype.setImageTexture = function(_texture) {
    this.log('setImageTexture: ', _texture);
    this._imageTexture = _texture;
    this._imageMaterial = new THREE.MeshBasicMaterial({
      map: this._imageTexture
    });
    this._imageGeometry = new THREE.PlaneGeometry(this._imageTexture.image.width / this._imageTexture.image.height, 1);
    this._imageMesh = new THREE.Mesh(this._imageGeometry, this._imageMaterial);
    this._imageMesh.position.set(0, 0, -1);
    if (this.config.showOriginal) {
      return this.scene.add(this._imageMesh);
    }
  };

  return Tiler;

})();
