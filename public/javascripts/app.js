// Generated by CoffeeScript 1.6.3
(function() {
  var App,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    function App() {
      this._keyDown = __bind(this._keyDown, this);
    }

    App.prototype.init = function() {
      var _this = this;
      this.clock = new THREE.Clock();
      this.notes = new Backbone.Collection();
      this.analyser = new Analyser({
        notes: this.notes,
        clock: this.clock
      });
      this.midi_interface = new MidiInterface();
      this.initVfx();
      this.initGui();
      this.scene = this.createScene();
      this.controls = new THREE.TrackballControls(this.camera, this.renderer.domElement);
      $(window).on('keydown', this._keyDown).mousemove(this._mouseMove);
      this.notes.on('add', function(note) {
        var i, _i, _ref, _results;
        if (_this.notesConfig.maxNotes === 0 || _this.notes.length <= _this.notesConfig.maxNotes) {
          return;
        }
        _results = [];
        for (i = _i = _ref = _this.notes.length - _this.notesConfig.maxNotes - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          _results.push(_this.notes.remove(_this.notes.at(i)));
        }
        return _results;
      });
      return this.clock.start();
    };

    App.prototype.update = function() {
      var dt;
      dt = this.clock.getDelta();
      this.analyser.update(dt);
      TWEEN.update();
      if (this.config.trackballControls) {
        this.controls.update(dt);
      }
      this.singleLine.update(dt);
      this.randomShapes.update(dt);
      this.tiler.update(dt);
      this.rolls.update(dt);
      if (this.config.paused) {

      }
    };

    App.prototype.draw = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    App.prototype.initVfx = function() {
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
      this.renderer = new THREE.WebGLRenderer({
        preserveDrawingBuffer: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      return jQuery('body').append(this.renderer.domElement);
    };

    App.prototype.createScene = function() {
      var scene;
      scene = new THREE.Scene();
      this.singleLine = new SingleLine({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui
      });
      this.randomShapes = new RandomShapes({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui
      });
      this.tiler = new Tiler({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui,
        imageUrl: 'images/elephant.jpg'
      });
      this.rolls = new Rolls({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui,
        analyser: this.analyser
      });
      return scene;
    };

    App.prototype._resize = function() {
      return console.log('TODO; _resize');
    };

    App.prototype._keyDown = function(e) {
      if (this.config.logKeys) {
        console.log('keycode: ' + e.keyCode, e);
      }
      if (this.config.keysToNotes) {
        this.notes.add({
          note: e.keyCode,
          time: this.clock.getElapsedTime()
        });
      }
      if (e.keyCode === 32) {
        return this.config.paused = !this.config.paused;
      }
    };

    App.prototype.initGui = function() {
      var folder,
        _this = this;
      this.gui = new dat.GUI();
      this.config = {
        running: true,
        trackballControls: false,
        logKeys: false,
        keysToNotes: true
      };
      this.notesConfig = {
        maxNotes: 0
      };
      if (this.gui) {
        this.gui.remember(this.config);
        folder = this.gui.addFolder('App');
        _.each(Object.keys(this.config), function(key) {
          var item;
          return item = folder.add(_this.config, key);
        });
        folder.add({
          Reset: function() {
            return _this.reset();
          }
        }, 'Reset');
        this.gui.remember(this.notesConfig);
        folder = this.gui.addFolder('Notes');
        return _.each(Object.keys(this.notesConfig), function(key) {
          var item;
          return item = folder.add(_this.notesConfig, key);
        });
      }
    };

    App.prototype.reset = function() {
      this.notes.reset();
      return this.camera.position.set(0, 0, 0);
    };

    return App;

  })();

  jQuery(document).ready(function() {
    window.drawFrame = function() {
      requestAnimationFrame(drawFrame);
      if (app.config.running) {
        app.update();
        return app.draw();
      }
    };
    window.app = new App();
    window.app.init();
    window.drawFrame();
    return console.log('page loaded ok');
  });

}).call(this);
