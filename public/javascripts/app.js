// Generated by CoffeeScript 1.6.3
(function() {
  var App,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    function App() {
      this._keyDown = __bind(this._keyDown, this);
    }

    App.prototype.init = function() {
      this.notes = new Backbone.Collection();
      this.initVfx();
      this.initGui();
      this.scene = this.createScene();
      this.clock = new THREE.Clock();
      this.controls = new THREE.TrackballControls(this.camera, this.renderer.domElement);
      return $(window).on('keydown', this._keyDown).mousemove(this._mouseMove);
    };

    App.prototype.update = function() {
      var dt;
      dt = this.clock.getDelta();
      TWEEN.update();
      if (this.gui_values.trackballControls) {
        this.controls.update(dt);
      }
      this.singleLine.update(dt);
      this.randomShapes.update(dt);
      this.tiler.update(dt);
      if (this.gui_values.paused) {

      }
    };

    App.prototype.draw = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    App.prototype.initVfx = function() {
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
      this.renderer = new THREE.WebGLRenderer({
        preserveDrawingBuffer: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      return jQuery('body').append(this.renderer.domElement);
    };

    App.prototype.createScene = function() {
      var scene;
      scene = new THREE.Scene();
      this.singleLine = new SingleLine({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui
      });
      this.randomShapes = new RandomShapes({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui
      });
      this.tiler = new Tiler({
        scene: scene,
        camera: this.camera,
        notes: this.notes,
        gui: this.gui,
        imageUrl: 'images/elephant.jpg'
      });
      return scene;
    };

    App.prototype._resize = function() {
      return console.log('TODO; _resize');
    };

    App.prototype._keyDown = function(e) {
      if (this.gui_values.logKeys) {
        console.log('keycode: ' + e.keyCode, e);
      }
      if (this.gui_values.keysToNotes) {
        this.notes.add({
          note: e.keyCode
        });
      }
      if (e.keyCode === 32) {
        return this.gui_values.paused = !this.gui_values.paused;
      }
    };

    App.prototype.initGui = function() {
      var folder, item,
        _this = this;
      this.gui = new dat.GUI();
      this.gui_values = new function() {
        this.trackballControls = false;
        this.logKeys = false;
        this.keysToNotes = true;
        return this.running = true;
      };
      this.gui.remember(this.gui_values);
      folder = this.gui.addFolder('Params');
      item = folder.add(this.gui_values, 'running');
      item = folder.add(this.gui_values, 'trackballControls');
      item = folder.add(this.gui_values, 'logKeys');
      item = folder.add(this.gui_values, 'keysToNotes');
      return folder.add({
        Reset: function() {
          return _this.reset();
        }
      }, 'Reset');
    };

    App.prototype.reset = function() {
      this.notes.reset();
      return this.camera.position.set(0, 0, 0);
    };

    return App;

  })();

  jQuery(document).ready(function() {
    window.drawFrame = function() {
      requestAnimationFrame(drawFrame);
      if (app.gui_values.running) {
        app.update();
        return app.draw();
      }
    };
    window.app = new App();
    window.app.init();
    window.drawFrame();
    return console.log('page loaded ok');
  });

}).call(this);
