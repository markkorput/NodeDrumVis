// Generated by CoffeeScript 1.6.3
(function() {
  var MidiInterfaceView;

  MidiInterfaceView = Backbone.View.extend({
    tagName: 'div',
    className: 'midi-interface-view',
    events: {
      'change select': 'onPortSelect'
    },
    initialize: function(opts) {
      this.render();
      return this.collection.on('reset', this.render, this);
    },
    render: function() {
      var select;
      if (!this.collection) {
        this.$el.html('No MIDI port information available');
        return;
      }
      if (this.collection.length === 0) {
        this.$el.html('No MIDI ports');
      }
      select = jQuery('<select></select>');
      select.append('<option value="none">Midi Port Disabled</option>');
      this.collection.each(function(midi_port) {
        return select.append('<option value="' + midi_port.id + '">' + midi_port.get('name') + '</option>');
      });
      this.$el.html('');
      return this.$el.append(select);
    },
    onPortSelect: function(e) {
      return this.trigger('port_selected', this.$el.find('select').val());
    }
  });

  this.MidiInterface = (function() {
    function MidiInterface(_opts) {
      var _this = this;
      this.options = _opts;
      this.midi_ports || (this.midi_ports = new Backbone.Collection());
      this.midi_ports.on('change:open', function(model, value, obj) {
        if (!_this.socket) {
          _this.log("No socket initialized, can't request open/close midi port");
          return;
        }
        if (value === true) {
          _this.socket.emit('POST /midi_port', {
            id: model.id,
            forward: true
          });
        }
        if (value === false && model.previous('open') === true) {
          return _this.socket.emit('POST /midi_port', {
            id: model.id,
            forward: false
          });
        }
      });
      this.init();
      this.midi_interface_view = new MidiInterfaceView({
        collection: this.midi_ports
      });
      $('body').append(this.midi_interface_view.el);
      this.midi_interface_view.on('port_selected', this.changePort, this);
    }

    MidiInterface.prototype.changePort = function(port_id) {
      var midi_port;
      this.midi_ports.each(function(midi_port) {
        return midi_port.set({
          open: false
        });
      });
      if (midi_port = this.midi_ports.get(port_id)) {
        return midi_port.set({
          open: true
        });
      }
    };

    MidiInterface.prototype.init = function() {
      var _this = this;
      if (typeof io === 'undefined') {
        this.log("IO module not loaded, can't establish socket connection with server");
      } else {
        this.socket = io.connect('http://localhost');
      }
      if (this.socket) {
        return this.socket.on('ack', function(data) {
          _this.socket.emit('ack', "Ack received");
          _this.socket.on('midi', function(data) {
            return _this.log("Got midi msg", data);
          });
          _this.socket.on('midi_ports', function(data) {
            return _this.midi_ports.reset(data);
          });
          _this.socket.on('midi-msg', function(data) {
            return _this.log('midi-msg:', data);
          });
          return _this.socket.emit('GET /midi_ports');
        });
      }
    };

    MidiInterface.prototype.log = function(msg) {
      var prefix;
      prefix = 'MidiInterface';
      if (arguments.length === 1) {
        console.log(prefix, msg);
        return;
      }
      if (arguments.length === 2) {
        console.log(prefix, msg, arguments[1]);
        return;
      }
      if (arguments.length === 3) {
        console.log(prefix, msg, arguments[1], arguments[2]);
        return;
      }
      return console.log(prefix, msg, arguments[1], arguments[2], arguments[3]);
    };

    return MidiInterface;

  })();

}).call(this);
